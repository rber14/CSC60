Script started on Sat 19 May 2018 06:03:29 PM PDT
[camposr@athena:17]> cat lab10.c
/* Author(s): Roberto Campos.
 *
 * This is lab9.c the csc60mshell
 * This program serves as a skeleton for doing labs 9, 10, 11.
 * Student is required to use this program to build a mini shell
 * using the specification as documented in direction.
 * Date: Spring 2018
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>

#define MAXLINE 80
#define MAXARGS 20
#define MAX_PATH_LENGTH 50
#define TRUE 1

/* function prototypes */
int parseline(char *cmdline, char **argv);

//The two function prototypess below will be needed in lab10. 
//Leave them here to be used later.
/* void process_input(int argc, char **argv); */
/* void handle_redir(int count, char *argv[]); */

/* ----------------------------------------------------------------- */
/*                  The main program starts here                     */
/* ----------------------------------------------------------------- */
int main(void)
{
    char cmdline[MAXLINE];
    char *argv[MAXARGS];
    int argc;
    int status;
    pid_t pid;
    char path[MAX_PATH_LENGTH];
    char* path1=(char*)malloc(50);

    /* Loop forever to wait and process commands */
    while (TRUE) {
	/* Print your shell name: csc60mshell (m for mini shell) */
	printf("csc60minishell> ");

	/* Read the command line */
	fgets(cmdline, MAXLINE, stdin);

	argc=parseline(cmdline,argv);/* Call parseline to build argc/argv */


	/* If user hits enter key without a command, continue to loop */
        if(argc==0)
	{
	  continue;
	}
	/* again at the beginning */
	/*  Hint: if argc is zero, no command declared */
	if(strcmp(argv[0],"exit")==0)
	{
	  exit(0);
	}
	else if(strcmp(argv[0],"pwd")==0)
	{
	  if(getcwd(path,MAX_PATH_LENGTH)==NULL)
	  {
	     printf("%s%s\n",strerror(errno),path);
	  }
	  printf("%s\n",path);
		continue;
	}
	else if(strcmp(argv[0],"cd")==0)
	{
	  char* dir;
	  if(argc==1)
	  {
		path1=getenv("HOME");
		if(path1!=NULL)
		{
		  if(chdir(path1)!=0)
		  {
		    printf("%s%s\n",strerror(errno),path1);
		  }
         	
		}
	}
	else
	{
	  if(chdir(dir)!=0)
	  {
	     printf("%s%s\n",strerror(errno),argv[1]);
	  }
		continue;
	}
      }
	/*  Hint: look up for the keyword "continue" in C */

	/* Handle build-in command: exit, pwd, or cd  */
	/* Put the rest of your code here */




 
//.......................IGNORE........................	
//	/* Else, fork off a process */ 
      else {
            pid = fork();
            switch(pid)
            {
                case -1:
                    perror("Shell Program fork error");
                    exit(EXIT_FAILURE);
                case 0:
                    printf("I am child process. I will execute the command, \n");
                    printf("before execvp\n");
                   // execvp(argv[0], argv);
                    printf("after execvp\n");
                    process_input(argc, argv);
                    printf("???");
                    break;
            default:
                /* I am parent process */
                    printf("I am parent process\n");
                if (wait(&status) == -1)
                    perror("Parent Process error");
                else
                    printf("Child returned status: %d\n",status);
                break;
            }	/* end of the switch */
        }	/* end of the if-else-if */
    }		/* end of the while */
} 		/* end of main */

/* ----------------------------------------------------------------- */
/*                  parseline                                        */
/* ----------------------------------------------------------------- */
/* parse input line into argc/argv format */

int parseline(char *cmdline, char **argv)
{
    int count = 0;
    char *separator = " \n\t"; /* Includes space, Enter, Tab */
 
    /* strtok searches for the characters listed in separator */
    argv[count] = strtok(cmdline, separator);

    while ((argv[count] != NULL) && (count+1 < MAXARGS)) 
    	argv[++count] = strtok((char *) 0, separator);
     		
    return count;
}
/* ----------------------------------------------------------------- */
/*                  process_input                                    */
/* ----------------------------------------------------------------- */
void process_input(int argc, char **argv) {

    /* Step 1: Call handle_redir to deal with operators:            */
    /* < , or  >, or both                                           */
    printf("???");
    handle_redir(argc, argv);
    printf("????");
    int returned_value = execvp(argv[0], argv);
    if(returned_value == -1){
        fprintf(stderr, "Error on the exec call\n");
        _exit(EXIT_FAILURE);
    }

    /* Step 2: perform system call execvp to execute command        */
    /* Hint: Please be sure to review execvp.c sample program       */
    /* if (........ == -1) {                                        */
    /*    fprintf(stderr, "Error on the exec call\n");              */
    /*    _exit(EXIT_FAILURE);                                      */
    /* }                                                            */
 
}
/* ----------------------------------------------------------------- */
void handle_redir(int count, char *argv[]){
    int in_redir = 0;
    int out_redir = 0;
    int i;
    for(i=0; i<count; i++){
        if(strcmp(">", argv[i]) ==0){
            if(out_redir != 0){
                perror("Cannot output to more than one file.");
                _exit(EXIT_FAILURE);
            }
            else if(i == 0){
                perror("No command entered");
                _exit(EXIT_FAILURE);
            }
            out_redir = i;
        }
        else if(strcmp("<", argv[i]) == 0){
            if(in_redir != 0){
                perror("Cannot input from more than one file.");
                _exit(EXIT_FAILURE);
            }
            else if(i == 0){
                perror("No command entered");
                _exit(EXIT_FAILURE);
            }
            in_redir = i;
        }       //end of the if
    }   //end of the for loop

       printf("out_redir: %i\n", out_redir);
    int fd;
    if(out_redir != 0){
        if(argv[out_redir +1] == NULL){
            perror("There is no file");
            _exit(EXIT_FAILURE);
        }
        printf("inside argv[out_redir +1] = %s\n",argv[out_redir+1]);
        fd = open(argv[out_redir +1], O_RDWR|O_CREAT|O_TRUNC, S_IRUSR|S_IWUSR);
        if(fd == -1){
            perror("Error opening file");
            _exit(EXIT_FAILURE);
        }
        dup2(fd, 1);
        if(close(fd) == -1){
            perror("close file error");
            _exit(EXIT_FAILURE);
        }
        argv[out_redir] = NULL;
    } //end of if(our_redit !=0)

    if(in_redir != 0){
        if(argv[in_redir +1] == NULL){
            perror("There is no file");
            _exit(EXIT_FAILURE);
        }
        fd = open(argv[in_redir+1], O_RDONLY);
        if(fd == -1){
            perror("error opening file");
            _exit(EXIT_FAILURE);
        }
        dup2(fd, 0);
        if(close(fd) == -1){
            perror("close file error");
            _exit(EXIT_FAILURE);
        }
        argv[in_redir] = NULL;
    } //end of if(in_redit != 0)
}

/* ----------------------------------------------------------------- */
[camposr@athena:18]> gcc lab10.c
lab10.c:160: warning: conflicting types for ‘process_input’
lab10.c:123: note: previous implicit declaration of ‘process_input’ was here
lab10.c:182: warning: conflicting types for ‘handle_redir’
lab10.c:165: note: previous implicit declaration of ‘handle_redir’ was here
[camposr@athena:19]> exit
exit

Script done on Sat 19 May 2018 06:04:09 PM PDT
